{"version":3,"sources":["../../src/test/auto_test_utils.js"],"names":["Promise","require","fs","promisifyAll","expect","OUTPUT_PATH","__dirname","exports","requireAfterWrite","filename","data","file","process","env","TEST_BUILD","JSON","stringify","writeFileSync","code2arr","code","toString","split","filter","val","trim","diffFiles","input","output","all","readFileAsync","encoding","then","arr","to","eql"],"mappings":"AAAA;;;;;;AAEA,IAAMA,OAAO,GAAGC,OAAO,CAAC,UAAD,CAAvB;;AACA,IAAMC,EAAE,GAAGF,OAAO,CAACG,YAAR,CAAqBF,OAAO,CAAC,IAAD,CAA5B,CAAX;;AACA,IAAMG,MAAM,GAAGH,OAAO,CAAC,WAAD,CAAtB,C,CACA;;;AACA,IAAMI,WAAW,GAAGC,SAAS,GAAC,qBAA9B;;AAGAC,OAAO,CAACC,iBAAR,GAA4B,SAASA,iBAAT,CAA2BC,QAA3B,EAAqCC,IAArC,EAC5B;AACC,MAAIC,IAAI,GAAGN,WAAW,GAACI,QAAvB;AACA,MAAI,CAACG,OAAO,CAACC,GAAR,CAAYC,UAAjB,EAA6B,OAAOb,OAAO,CAACU,IAAD,CAAd;;AAE7B,MAAI,sBAAOD,IAAP,KAAe,QAAnB,EACA;AACCA,IAAAA,IAAI,GAAGK,IAAI,CAACC,SAAL,CAAeN,IAAf,EAAqB,IAArB,EAA2B,IAA3B,CAAP;AACA;;AAEDR,EAAAA,EAAE,CAACe,aAAH,CAAiBN,IAAjB,EAAuBD,IAAvB;AAEA,SAAOT,OAAO,CAACU,IAAD,CAAd;AACA,CAbD;;AAeAJ,OAAO,CAACW,QAAR,GAAmB,SAASA,QAAT,CAAkBC,IAAlB,EACnB;AACC,SAAOA,IAAI,CAACC,QAAL,GAAgBC,KAAhB,CAAsB,IAAtB,EACLC,MADK,CACE,UAASC,GAAT,EACR;AACC,WAAOA,GAAG,CAACC,IAAJ,EAAP;AACA,GAJK,CAAP;AAKA,CAPD;;AASAjB,OAAO,CAACkB,SAAR,GAAoB,SAASA,SAAT,CAAmBC,KAAnB,EAA0BC,MAA1B,EACpB;AACC,SAAO,UAASlB,QAAT,EACP;AACC,WAAOT,OAAO,CAAC4B,GAAR,CACN,CACC1B,EAAE,CAAC2B,aAAH,CAAiBH,KAAK,GAAC,GAAN,GAAUjB,QAA3B,EAAqC;AAACqB,MAAAA,QAAQ,EAAE;AAAX,KAArC,CADD,EAEC5B,EAAE,CAAC2B,aAAH,CAAiBF,MAAM,GAAC,GAAP,GAAWlB,QAA5B,EAAsC;AAACqB,MAAAA,QAAQ,EAAE;AAAX,KAAtC,CAFD,CADM,EAKLC,IALK,CAKA,UAASC,GAAT,EACN;AACC5B,MAAAA,MAAM,CAACG,OAAO,CAACW,QAAR,CAAiBc,GAAG,CAAC,CAAD,CAApB,CAAD,CAAN,CAAiCC,EAAjC,CAAoCC,GAApC,CAAwC3B,OAAO,CAACW,QAAR,CAAiBc,GAAG,CAAC,CAAD,CAApB,CAAxC;AACA,KARK,CAAP;AASA,GAXD;AAYA,CAdD","sourcesContent":["'use strict';\n\nconst Promise = require('bluebird');\nconst fs = Promise.promisifyAll(require('fs'));\nconst expect = require('expect.js');\n// const INPUT_PATH = __dirname+'/../../global/test/input/';\nconst OUTPUT_PATH = __dirname+'/../../global/test/output/';\n\n\nexports.requireAfterWrite = function requireAfterWrite(filename, data)\n{\n\tlet file = OUTPUT_PATH+filename;\n\tif (!process.env.TEST_BUILD) return require(file);\n\n\tif (typeof data == 'object')\n\t{\n\t\tdata = JSON.stringify(data, null, '\\t');\n\t}\n\n\tfs.writeFileSync(file, data);\n\n\treturn require(file);\n}\n\nexports.code2arr = function code2arr(code)\n{\n\treturn code.toString().split('\\n')\n\t\t.filter(function(val)\n\t\t{\n\t\t\treturn val.trim();\n\t\t});\n}\n\nexports.diffFiles = function diffFiles(input, output)\n{\n\treturn function(filename)\n\t{\n\t\treturn Promise.all(\n\t\t\t[\n\t\t\t\tfs.readFileAsync(input+'/'+filename, {encoding: 'utf8'}),\n\t\t\t\tfs.readFileAsync(output+'/'+filename, {encoding: 'utf8'})\n\t\t\t])\n\t\t\t.then(function(arr)\n\t\t\t{\n\t\t\t\texpect(exports.code2arr(arr[1])).to.eql(exports.code2arr(arr[0]));\n\t\t\t});\n\t}\n}\n"],"file":"auto_test_utils.js"}