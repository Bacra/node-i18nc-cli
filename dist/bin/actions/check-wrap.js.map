{"version":3,"sources":["../../../src/bin/actions/check-wrap.js"],"names":["Promise","require","path","debug","cliUtil","cliPrinter","module","exports","input","options","scanFileList","resolve","isRecurse","fileInfo","myOptions","I18NHandlerName","I18NHandlerAlias","ignoreScanHandlerNames","codeModifyItems","I18NHandler","data","onlyTheseLanguages","style","minFuncCode","minTranslateFuncCode","insert","checkClosure","isCheckClosureForNewI18NHandler","files","type","map","file","file2i18nc","result","newlist","allCodeTranslateWords","list4newWordAsts","dirtyWords","allDirtyWords","concurrency","results","forEach","_printResult","checkWrap","item","length","list","console","log","colors","green","red","output","printDirtyAndNewWords"],"mappings":"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","sourcesContent":["'use strict';\n\nconst Promise    = require('bluebird');\nconst path       = require('path');\nconst debug      = require('debug')('i18nc:check');\nconst cliUtil    = require('../cli_util');\nconst cliPrinter = require('../../util/cli_printer');\n\nmodule.exports = async function checkWrap(input, options)\n{\n\tlet fileInfo = await cliUtil.scanFileList(path.resolve(input), options.isRecurse)\n\tlet myOptions =\n\t{\n\t\tI18NHandlerName        : options.I18NHandlerName,\n\t\tI18NHandlerAlias       : options.I18NHandlerAlias,\n\t\tignoreScanHandlerNames : options.ignoreScanHandlerNames,\n\t\tcodeModifyItems        : options.codeModifyItems,\n\t\tI18NHandler:\n\t\t{\n\t\t\tdata: {onlyTheseLanguages: options.onlyTheseLanguages},\n\t\t\tstyle: {minFuncCode: options.minTranslateFuncCode},\n\t\t\tinsert:\n\t\t\t{\n\t\t\t\tcheckClosure: options.isCheckClosureForNewI18NHandler,\n\t\t\t},\n\t\t}\n\t};\n\n\tlet files = fileInfo.type == 'list' ? fileInfo.data : [fileInfo.data];\n\tlet results = await Promise.map(files, async function(file)\n\t\t{\n\t\t\tdebug('i18n file start: %s', file);\n\n\t\t\tlet result = await cliUtil.file2i18nc(file, myOptions)\n\t\t\tlet newlist = result.allCodeTranslateWords().list4newWordAsts();\n\t\t\tlet dirtyWords = result.allDirtyWords();\n\t\t\treturn {file: file, newlist: newlist, dirtyWords: dirtyWords};\n\t\t},\n\t\t{\n\t\t\tconcurrency: 5\n\t\t});\n\n\tresults.forEach(_printResult);\n}\n\n\nfunction _printResult(item)\n{\n\tif (!item.newlist.length && !item.dirtyWords.list.length)\n\t{\n\t\tconsole.log('  '+cliPrinter.colors.green('ok')+' '+item.file);\n\t}\n\telse\n\t{\n\t\tconsole.log('  '+cliPrinter.colors.red('fail')+' '+item.file);\n\t\tlet output = cliPrinter.printDirtyAndNewWords(item.dirtyWords, item.newlist, 7);\n\n\t\tconsole.log(output);\n\t}\n}\n"],"file":"check-wrap.js"}