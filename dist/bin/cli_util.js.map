{"version":3,"sources":["../../src/bin/cli_util.js"],"names":["debug","require","Promise","fs","promisifyAll","glob","promisify","mkdirp","path","i18nc","stripBOM","exports","scanFileList","input","recurse","statAsync","stats","code","indexOf","nodir","realpath","files","type","data","isFile","realpathAsync","file","isDirectory","Error","cwd","getWriteOneFilePath","output","tailStr","length","dir","rfile","basename","join","file2i18nc","options","readFileAsync","encoding"],"mappings":"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","sourcesContent":["'use strict';\n\nconst debug    = require('debug')('i18nc:cli_util');\nconst Promise  = require('bluebird');\nconst fs       = Promise.promisifyAll(require('fs'));\nconst glob     = Promise.promisify(require('glob'));\nconst mkdirp   = Promise.promisify(require('mkdirp'));\nconst path     = require('path');\nconst i18nc    = require('i18nc-core');\nconst stripBOM = require('strip-bom');\n\nexports.scanFileList = scanFileList;\nasync function scanFileList(input, recurse)\n{\n\tlet stats;\n\ttry {\n\t\tstats = await fs.statAsync(input);\n\t}\n\tcatch(err)\n\t{\n\t\tif (!err || !err.code == 'ENOENT') throw err;\n\t\tif (!recurse && input.indexOf('*') == -1) throw err;\n\n\t\tdebug('input is not exists, start glob');\n\n\t\tlet files = await glob(input, {nodir: true, realpath: true})\n\t\treturn {\n\t\t\ttype: 'list',\n\t\t\tdata: files\n\t\t};\n\t}\n\n\n\tif (stats.isFile())\n\t{\n\t\tdebug('input is file');\n\t\tlet file = await fs.realpathAsync(input);\n\t\treturn {\n\t\t\ttype: 'one',\n\t\t\tdata: file\n\t\t};\n\t}\n\telse if (stats.isDirectory())\n\t{\n\t\tdebug('input is dir');\n\t\tif (!recurse) throw new Error('Input Is A Directory');\n\n\t\tlet files = await glob('**/*', {cwd: input, nodir: true, realpath: true})\n\t\treturn {\n\t\t\ttype: 'list',\n\t\t\tdata: files\n\t\t};\n\t}\n\telse\n\t{\n\t\tthrow new Error('Input Is Not File Or Directory');\n\t}\n}\n\n/**\n * 写入一个文件，需要判断input本身的文件状态\n */\nexports.getWriteOneFilePath = getWriteOneFilePath;\nasync function getWriteOneFilePath(output, input)\n{\n\tlet stats;\n\ttry {\n\t\tstats = await fs.statAsync(output);\n\t}\n\tcatch(err)\n\t{\n\t\tif (!err || err.code != 'ENOENT') throw err;\n\n\t\tdebug('output is not exists');\n\t\t// 当文件不存在的时候\n\t\tlet tailStr = output[output.length-1];\n\t\tlet dir, rfile;\n\t\tif (tailStr == '/' || tailStr == '\\\\')\n\t\t{\n\t\t\tdebug('ouput maybe is path');\n\t\t\tdir = output;\n\t\t\trfile = dir + path.basename(input);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdir = path.join(output, '..');\n\t\t\trfile = output;\n\t\t}\n\n\t\tawait mkdirp(dir);\n\t\treturn rfile;\n\t}\n\n\tif (stats.isFile())\n\t{\n\t\tdebug('output is file');\n\t\treturn output;\n\t}\n\telse if (stats.isDirectory())\n\t{\n\t\tdebug('output is dir');\n\t\treturn output+'/'+path.basename(input);\n\t}\n\telse\n\t{\n\t\tthrow new Error('Input Is Not File Or Directory');\n\t}\n}\n\n\nexports.file2i18nc = file2i18nc;\nasync function file2i18nc(file, options)\n{\n\tlet code = await fs.readFileAsync(file,\n\t\t{\n\t\t\tencoding: 'utf8'\n\t\t});\n\n\treturn i18nc(stripBOM(code), options);\n}\n"],"file":"cli_util.js"}